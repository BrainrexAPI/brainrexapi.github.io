(window.webpackJsonp=window.webpackJsonp||[]).push([[77],{173:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return s})),t.d(n,"rightToc",(function(){return p})),t.d(n,"default",(function(){return u}));var a=t(1),r=t(6),i=(t(0),t(205)),o={title:"Analyzing Sentiment Tutorial",sidebar_label:"Analyzing Anomalies",description:"In Depth tutorial of how to perform anomaly detection in time series using the BrainRex API."},s={id:"tutorials/analyzing-anomalies",title:"Analyzing Sentiment Tutorial",description:"In Depth tutorial of how to perform anomaly detection in time series using the BrainRex API.",source:"@site/docs/tutorials/analyzing-anomalies.md",permalink:"/docs/tutorials/analyzing-anomalies",editUrl:"https://github.com/brainrexapi/brainrexapi.github.io/edit/master/docs/tutorials/analyzing-anomalies.md",sidebar_label:"Analyzing Anomalies",sidebar:"docs",previous:{title:"Analyzing Sentiment Tutorial",permalink:"/docs/tutorials/analyzing-entities"},next:{title:"Extracting Crypto Exchange DATA",permalink:"/docs/tutorials/extracting-exchange-data"}},p=[{value:"Your first call to the General Sentiment API",id:"your-first-call-to-the-general-sentiment-api",children:[]},{value:"Lets download a sample dataset we provide",id:"lets-download-a-sample-dataset-we-provide",children:[]}],l={rightToc:p},c="wrapper";function u(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(i.b)(c,Object(a.a)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"!pip install brainrex\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),"Requirement already satisfied: brainrex in /home/ga/.local/lib/python3.6/site-packages (1.0.1)\nRequirement already satisfied: python-dateutil>=2.1 in /usr/local/lib/python3.6/dist-packages (from brainrex) (2.8.0)\nRequirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.6/dist-packages (from brainrex) (2019.9.11)\nRequirement already satisfied: six>=1.10 in /usr/local/lib/python3.6/dist-packages (from brainrex) (1.12.0)\nRequirement already satisfied: urllib3>=1.23 in /usr/local/lib/python3.6/dist-packages (from brainrex) (1.25.6)\n\x1b[33mYou are using pip version 19.0.3, however version 19.3.1 is available.\nYou should consider upgrading via the 'pip install --upgrade pip' command.\x1b[0m\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"### Making your first call quickstart\nfrom __future__ import print_function\nimport time\nimport brainrex\nfrom brainrex.rest import ApiException\nfrom pprint import pprint\n\n# Go to console.brainrex.com/signup > APIs > Subcribe to an API > Dashboard > API Key > Copy\n# Configure API key authorization: APIKeyHeader\nconfiguration = brainrex.Configuration()\nconfiguration.api_key['x-api-key'] = 'INSERT_YOUR_API_KEY_HERE' # Paste key here\n\n# create an instance of the API class\napi_instance = brainrex.LanguageApi(brainrex.ApiClient(configuration))\ntext = brainrex.Text(\"bitcoin is the best\") # Text | String of text to be analyze for investor sentiment.\n\ntry:\n    # Sentiment analysis score using a model trained for buy signals.\n    api_response = api_instance.language_get_price_sentiment(text)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling LanguageApi->language_get_price_sentiment: %s\\n\" % e)\n\n")),Object(i.b)("h2",{id:"your-first-call-to-the-general-sentiment-api"},"Your first call to the General Sentiment API"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),'try:\n    # Sentiment analysis score using a model trained for buy signals.\n    api_response = api_instance.language_get_general_sentiment(text)\n    pprint(api_response)\nexcept ApiException as e:\n    print("Exception when calling LanguageApi->language_get_price_sentiment: %s\\n" % e)\n')),Object(i.b)("h2",{id:"lets-download-a-sample-dataset-we-provide"},"Lets download a sample dataset we provide"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"import pandas as pd\n\ntweets_dataframe = pd.read_csv('https://s3-eu-west-1.amazonaws.com/brainrex.com/data/sample_text_data.csv')\ntweetList= tweets_dataframe.Tweet.to_list()\ntweetList[:5]\n\nfor index, tweet in enumerate(tweetList[344:366]): # Change the number of posts you want to analyze by changing this values. [start:end]\n    try:\n        text = brainrex.Text(tweet)\n        investor_score = api_instance.language_get_price_sentiment(text)\n        sentiment_score = api_instance.language_get_general_sentiment(text)\n        # TODO add response\n        print('Sentence {} investor score of {}, general sentiment score {}'.format(index, investor_score, sentiment_score))\n\n    except ApiException as e:\n        print(\"Exception when calling LanguageApi->language_get_price_sentiment: %s\\n\" % e)\n\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"%matplotlib inline\nimport matplotlib.pyplot as plt\nres = []\nfor tweet in tweetList[:30]: # Change the number of posts you want to analyze by changing this values. [start:end]\n    try:\n        text = brainrex.Text(tweet)\n        api_response = api_instance.language_get_price_sentiment(text)\n        res.append(api_response)\n    except ApiException as e:\n        print(\"Exception when calling LanguageApi->language_get_price_sentiment: %s\\n\" % e)\n# Plot the results from the sentiment scores.\nseries = pd.DataFrame(res)\nseries=series.astype(float)\nplt.style.use('ggplot')\nseries.plot(figsize=(20,4))\n")))}u.isMDXComponent=!0},205:function(e,n,t){"use strict";t.d(n,"a",(function(){return u})),t.d(n,"b",(function(){return b}));var a=t(0),r=t.n(a);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=r.a.createContext({}),c=function(e){var n=r.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s({},n,{},e)),t},u=function(e){var n=c(e.components);return r.a.createElement(l.Provider,{value:n},e.children)},m="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},d=Object(a.forwardRef)((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),u=c(t),m=a,d=u["".concat(o,".").concat(m)]||u[m]||g[m]||i;return t?r.a.createElement(d,s({ref:n},l,{components:t})):r.a.createElement(d,s({ref:n},l))}));function b(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=d;var s={};for(var p in n)hasOwnProperty.call(n,p)&&(s[p]=n[p]);s.originalType=e,s[m]="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=t[l];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"}}]);